import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.types import InlineKeyboardButton,InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton 
from aiogram.dispatcher.filters.state import StatesGroup , State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from io import BytesIO
import requests
from PIL import Image
import os
import openai
import cofig as config
import time
import logging
import random
import asyncio
import datetime
from datetime import datetime, timedelta


TOKEN = config.TOKEN
openai.api_key = config.API_KEY

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)
db = sqlite3.connect('base.db', check_same_thread=False)
cur = db.cursor()
count_q = 0









ads = [
    "–ù—É–∂–µ–Ω IELTS? \n–í —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ ¬´Stanford¬ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ —Å IELTS 8.0\n\nstanfordnukus.t.me",
    "–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏ –∏ —Å—Ç—Ä–æ–π—Ç–µ —Å–µ–±–µ —Å–≤–µ—Ç–ª–æ–µ –∏ —É—Å–ø–µ—à–Ω–æ–µ –±—É–¥—É—â–µ–µ\n\nstanfordnukus.t.me",
    "–ü–æ–∫–∞ –¥—Ä—É–≥–∏–µ –¥—É–º–∞—é—Ç, –≤—ã –¥–µ–π—Å—Ç–≤—É–π—Ç–µ! \n–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π \n\nstanfordnukus.t.me",
    "–ù—É–∂–µ–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã?\n–í —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ ‚ÄúStanford‚Äù  –∏–¥–µ—Ç –Ω–∞–±–æ—Ä –Ω–∞ –≤–µ—á–µ—Ä–Ω–∏–µ –∫—É—Ä—Å—ãüòâ\n\nstanfordnukus.t.me",
    "–¢–æ–ª—å–∫–æ –≤ —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ Stanford –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å Cashback –æ—Ç 1–≥–æ –¥–æ 15 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Å—É–º–æ–≤ –∑–∞ –≤—ã—Å–æ–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ IELTS\n\nstanfordnukus.t.me",
    "IELTS kerekpe?\nStanford oqiw orayi mug‚Äôallimlerinde  IELTS 8.0üòé\n\nstanfordnukus.t.me",
    "Keshki waqit Inglis tili kursi kerekpe?\n\nStanford oqiw orayinda keshki kurslarg‚Äôa qabil bolip atirüòâ\n\nstanfordnukus.t.me",
    "–ù–µ —Ç–µ—Ä—è–π—Ç–µ –≤—Ä–µ–º—è –≤–ø—É—Å—Ç—É—éüôÖ‚Äç‚ôÇÔ∏è, –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–ºüôÜ‚Äç‚ôÄÔ∏è –û–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤—Å–µ–º!üòéüòé\n\nstanfordnukus.t.me"
]

messages=[
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Who won the world series in 2020?"},
    {"role": "assistant", "content": "The Los Angeles Dodgers won the World Series in 2020."},
    {"role": "user", "content": "Where was it played?"}
]

promptHis = []

def update(messages, role, content):
    messages.append({"role": role, "content": content})
    return messages


panel = types.ReplyKeyboardMarkup(resize_keyboard=True,row_width=1)
menu1 = types.KeyboardButton("üßë‚Äçüíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç üßë‚Äçüíª")
menu2 = types.KeyboardButton("üõé –û –Ω–∞—Å üõé")
menu3 = types.KeyboardButton("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
panel.add(menu1,menu2,menu3)






@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    global access
    global messages
    global cur
    global db
    await message.answer(f"*Salom {message.from_user.full_name}\nMen ChatGPT, sizga quyidagi imkoniyatlarni taqdim etuvchi sun'iy intellektman:\n‚Ä¢Barcha dasturlash tillarida kod yozish\n‚Ä¢Vazifalarni bajarish\n‚Ä¢Ssenariy yozish\n\nVa boshqa ko'plab imkoniyatlarga egaman!*", parse_mode=types.ParseMode.MARKDOWN, reply_markup=panel)
    with open('chatids.txt','a+') as chatids:
    	print(message.chat.id, file=chatids)
    with open('chatids.txt', 'r') as file:
    	lines = file.readlines()
    	lines = list(set(lines))
    with open('chatids.txt', 'w') as file:
    	file.writelines(lines)

    user_id = message.from_user.id
    name = message.from_user.first_name
    cur.execute(f"SELECT id FROM users WHERE id = {user_id}")
    if cur.fetchone() is None:
    	cur.execute("INSERT INTO users VALUES (NULL, ?, ?)", (name, user_id))
    	db.commit()
    	admins = ['6185590222']
    	for i in admins:
    		try:
    			time.sleep(1.5)
    			await bot.send_message(i,f'Yangi foydanaluvchi!\nIsm:[{message.from_user.full_name}](tg://user?id={message.from_user.id})\nüÜîÔ∏èID:<code>{message.from_user.id}</code>\nüóíUsername:@{message.from_user.username}',parse_mode=types.ParseMode.MARKDOWN)
    		except:
    			pass
@dp.message_handler(commands=['clear'])
async def clear(message: types.Message):
    global messages
    messages=[
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Who won the world series in 2020?"},
    {"role": "assistant", "content": "The Los Angeles Dodgers won the World Series in 2020."},
    {"role": "user", "content": "Where was it played?"}
]
    await message.answer("Tarix tozalandi", parse_mode=types.ParseMode.HTML)



@dp.message_handler(commands=['admin'])
async def admin(message):
		admins = ['6185590222']
		if str(message.from_user.id) in admins:
			adm = types.ReplyKeyboardMarkup(resize_keyboard=True,row_width=1)
			statistic = types.KeyboardButton("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
			rasslely = types.KeyboardButton("üì§Habar yuborish")
			adm.add(statistic,rasslely)
			await bot.send_message(message.chat.id,"üë®‚Äçüíª–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",reply_markup=adm)


@dp.message_handler(commands=['send'])
async def rassylka(message):
    admins = ['6185590222']
    if str(message.from_user.id) in admins:
        for i in open('chatids.txt', 'r').readlines():
            time.sleep(0.5)
            await bot.send_message(i,text = message.text.split()[1])

user_messages = {}


@dp.message_handler(content_types=['text'])
async def prompt(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_messages:
        # Check if the time elapsed between the current message and the previous message is less than 5 seconds
        if (datetime.now() - user_messages[user_id]) < timedelta(seconds=5):
            # The user is sending messages too frequently, send a warning message
            await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥!")
            return
    
    if message.text not in ["/start", "üßë‚Äçüíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç üßë‚Äçüíª", "üõé –û –Ω–∞—Å üõé", "/clear", "/re", "/admin", "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì§Habar yuborish", "‚ùå–í—ã–π—Ç–∏ —Å –∞–¥–º–∏–Ω –º–µ–Ω—é", "/send"]:
        user_messages[user_id] = datetime.now()
        global count_q
        promptHis.append(message.text)
        sent_message = await message.answer("<b>‚úçÔ∏è......</b>", parse_mode=types.ParseMode.HTML)
        update(messages, "user", message.text)
        response = openai.ChatCompletion.create(
            model = "gpt-3.5-turbo",
            messages = messages,
        )
        await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)
        await message.answer(response['choices'][0]['message']['content'], parse_mode="Markdown")
        random_message = random.choice(ads)
        await bot.send_message(message.chat.id, random_message, parse_mode="Markdown")
        count_q += 1
    else:
        if message.text == "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            global db
            global cur
            cur.execute("SELECT MAX(count) from users")
            t =  cur.fetchone()[0]
            if t is None:
                await bot.send_message(message.chat.id,f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nü§ñ–ë–æ—Ç : @DiyarbekAIChatBot\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüë§–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π : 0\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ : {count_q}")
            else:
                await bot.send_message(message.chat.id,f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nü§ñ–ë–æ—Ç : @DiyarbekAIChatBot\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüë§–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π : {t}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ : {count_q}")

        elif message.text == "üì§Habar yuborish":
            await bot.send_message(message.chat.id,"Habar yuobrish uchun shunaqa qilib yozing /send [yuboriladigon text]")

        elif message.text == "üßë‚Äçüíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç üßë‚Äçüíª":
            await bot.send_message(message.chat.id, "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: @Diyarbek_Dev\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –µ—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏—Ç–µ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏.")
        elif message.text == "üõé –û –Ω–∞—Å üõé":
            await bot.send_message(message.chat.id, "–ù–∞—à –∫–∞–Ω–∞–ª: @Diyarbek_Blog \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n –ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã: @DiyarbekAIChatBot @Awdarmashi_robot @CodeTesterProBot \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")





if __name__ == "__main__":
	executor.start_polling(dp, skip_updates=True)
